
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackContext
from datetime import datetime
import json

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
TOKEN = "7952224923:AAE6tWMZTQSrjz7Zj1dbCRki-Y0b3ZOQSCw"

# –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç–µ—Å—Ç–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤ JSON)
USER_DATA = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [["–ú–µ–¥–∏—Ç–∞—Ü—ñ—è ‚úÖ", "–†–æ–∑—Ç—è–∂–∫–∞ ‚úÖ"],
                ["–ü—Ä–æ–∫–∏–Ω—É–≤—Å—è –¥–æ 7:00 üåÖ", "–ö—É—Ä—ñ–Ω–Ω—è üö¨"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! –¶–µ —Ç–≤—ñ–π —Ç—Ä–µ–∫–µ—Ä –∑–≤–∏—á–æ–∫ üåø

–û–±–µ—Ä–∏, —â–æ —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –∑—Ä–æ–±–∏–≤ üëá",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    msg = update.message.text
    date_str = datetime.now().strftime('%Y-%m-%d')
    
    if user_id not in USER_DATA:
        USER_DATA[user_id] = {}

    if date_str not in USER_DATA[user_id]:
        USER_DATA[user_id][date_str] = {
            "meditation": False,
            "stretching": False,
            "wake_early": False,
            "smoking": 0
        }

    if "–ú–µ–¥–∏—Ç–∞—Ü—ñ—è" in msg:
        USER_DATA[user_id][date_str]["meditation"] = True
        await update.message.reply_text("üßò –ú–µ–¥–∏—Ç–∞—Ü—ñ—é –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!")

    elif "–†–æ–∑—Ç—è–∂–∫–∞" in msg:
        USER_DATA[user_id][date_str]["stretching"] = True
        await update.message.reply_text("üßò‚Äç‚ôÇÔ∏è –†–æ–∑—Ç—è–∂–∫—É –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!")

    elif "–ü—Ä–æ–∫–∏–Ω—É–≤—Å—è" in msg:
        USER_DATA[user_id][date_str]["wake_early"] = True
        await update.message.reply_text("üåÖ –ü—Ä–æ–∫–∏–Ω—É–≤—Å—è –≤—á–∞—Å–Ω–æ ‚Äî –º–æ–ª–æ–¥–µ—Ü—å!")

    elif "–ö—É—Ä—ñ–Ω–Ω—è" in msg:
        await update.message.reply_text("üö¨ –ù–∞–ø–∏—à–∏, —Å–∫—ñ–ª—å–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —Å–∏–≥–∞—Ä–µ—Ç –≤–∏–∫—É—Ä–∏–≤?")
        return

    elif msg.isdigit():
        USER_DATA[user_id][date_str]["smoking"] += int(msg)
        await update.message.reply_text(f"üö¨ –ó–∞–Ω–æ—Ç—É–≤–∞–≤: {msg} —Å–∏–≥–∞—Ä–µ—Ç")

    # –ó–±–µ—Ä–µ–≥—Ç–∏ —É —Ñ–∞–π–ª (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –±–∞–∑—É)
    with open("user_data.json", "w") as f:
        json.dump(USER_DATA, f)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
