
import logging
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import json
import asyncio

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = os.getenv("TOKEN")
USER_DATA = {}
SCHEDULED_USERS = set()

keyboard = [["–ú–µ–¥–∏—Ç–∞—Ü—ñ—è ‚úÖ", "–†–æ–∑—Ç—è–∂–∫–∞ ‚úÖ"],
            ["–ü—Ä–æ–∫–∏–Ω—É–≤—Å—è –¥–æ 7:00 üåÖ", "–ö—É—Ä—ñ–Ω–Ω—è üö¨"]]
reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    SCHEDULED_USERS.add(user.id)
    msg = f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! –¶–µ —Ç–≤—ñ–π —Ç—Ä–µ–∫–µ—Ä –∑–≤–∏—á–æ–∫ üåø\n\n–û–±–µ—Ä–∏, —â–æ —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –∑—Ä–æ–±–∏–≤ üëá"
    await update.message.reply_text(msg, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    msg = update.message.text
    date_str = datetime.now().strftime('%Y-%m-%d')
    
    if user_id not in USER_DATA:
        USER_DATA[user_id] = {}

    if date_str not in USER_DATA[user_id]:
        USER_DATA[user_id][date_str] = {
            "meditation": False,
            "stretching": False,
            "wake_early": False,
            "smoking": 0
        }

    if "–ú–µ–¥–∏—Ç–∞—Ü—ñ—è" in msg:
        USER_DATA[user_id][date_str]["meditation"] = True
        await update.message.reply_text("üßò –ú–µ–¥–∏—Ç–∞—Ü—ñ—é –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!")

    elif "–†–æ–∑—Ç—è–∂–∫–∞" in msg:
        USER_DATA[user_id][date_str]["stretching"] = True
        await update.message.reply_text("üßò‚Äç‚ôÇÔ∏è –†–æ–∑—Ç—è–∂–∫—É –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!")

    elif "–ü—Ä–æ–∫–∏–Ω—É–≤—Å—è" in msg:
        USER_DATA[user_id][date_str]["wake_early"] = True
        await update.message.reply_text("üåÖ –ü—Ä–æ–∫–∏–Ω—É–≤—Å—è –≤—á–∞—Å–Ω–æ ‚Äî –º–æ–ª–æ–¥–µ—Ü—å!")

    elif "–ö—É—Ä—ñ–Ω–Ω—è" in msg:
        await update.message.reply_text("üö¨ –ù–∞–ø–∏—à–∏, —Å–∫—ñ–ª—å–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —Å–∏–≥–∞—Ä–µ—Ç –≤–∏–∫—É—Ä–∏–≤?")
        return

    elif msg.isdigit():
        USER_DATA[user_id][date_str]["smoking"] += int(msg)
        await update.message.reply_text(f"üö¨ –ó–∞–Ω–æ—Ç—É–≤–∞–≤: {msg} —Å–∏–≥–∞—Ä–µ—Ç")

    with open("user_data.json", "w") as f:
        json.dump(USER_DATA, f)

async def send_reminders(application):
    for user_id in SCHEDULED_USERS:
        try:
            await application.bot.send_message(
                chat_id=user_id,
                text="–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É üåû\n–Ø–∫ –ø–æ—á–∞–≤—Å—è –¥–µ–Ω—å?\n\nüîò –ü—Ä–æ–∫–∏–Ω—É–≤—Å—è –¥–æ 7:00\nüîò –†–æ–∑—Ç—è–∂–∫–∞\nüîò –ú–µ–¥–∏—Ç–∞—Ü—ñ—è\nüîò –ö—É—Ä–∏–≤? –°–∫—ñ–ª—å–∫–∏?",
                reply_markup=reply_markup
            )
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")

def schedule_daily_job(application):
    scheduler = BackgroundScheduler(timezone="Europe/Kyiv")
    scheduler.add_job(lambda: asyncio.run(send_reminders(application)),
                      trigger='cron', hour=8, minute=0)
    scheduler.start()

def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")  # –í–∏–¥–Ω–æ —É Railway
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    schedule_daily_job(app)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ —â–æ–¥–µ–Ω–Ω–∏–º –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º –æ 8:00...")  # Railway –ø–æ–±–∞—á–∏—Ç—å —Ü–µ
    app.run_polling()

if __name__ == "__main__":
    main()
